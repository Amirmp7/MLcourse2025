import numpy as np
import random

class BernulliBandit:
    def __init__(self, p, verbose=True):
        self.p = p
        
        if verbose:
            print("Creating Be.Ban with p =", p)
    def pull(self):
        return np.random.binomial(1, self.p)

class BanditGame():
    def __init__(self, K, T, verbose=True):
        self.K = K
        self.T=T
        self.Bandits = [BernulliBandit(np.random.uniform(), verbose) for i in range(K)]
        self.verbose = verbose
        
    def run_Stochastic(self):
        results = np.zeros(self.T)
        for t in range(self.T):
            k=random.randrange(self.K)
            results[t]= self.Bandits[k].pull()
            if self.verbose:
                print("T=", t, "playing bandit", k, "reward is ", results[t])
                
        return results

def run_simulation(n_runs, runs_per_game , K , T):
    results = np.zeros((K,T))
    for run in range(n_runs):
        run_results = np.zeros((K,T))
        
        for run in range(runs_per_game):
            BG = BanditGame(K,T,verbose=False)
            run_results += BG.run_Stochastic()
            print(run_results)
            
        results += run_results / runs_per_game
        print(results)
        
    results = results / n_runs
    return results

print("Mean reward: ", mean_reward.mean())
print("Sum of All results: ", mean_reward.sum())

####################################################
####################################################

import numpy as np
import matplotlib.pyplot as plt

class Actions:
    def __init__(self, m):
        self.m = m
        self.mean = 0
        self.N = 0
        
    # Choose a random action
    def choose(self):
        return np.random.randn() + self.m
        
    # Update the action-value estimate
    def update(self, x):
        self.N +=1
        self.mean = self.mean - ((1.0/self.N) * (self.mean - x))


def run_experiment(m1, m2, m3, eps, N):
    list_actions = [Actions(m1), Actions(m2), Actions(m3)]
    data = np.empty(N)
    
    for i in range(N):
        # epsilon greedy
        p = np.random.random()
        if p<eps:
            j=np.random.choice(3)
        else:
            j = np.argmax([a.mean for a in list_actions])
            
        x = list_actions[j].choose()
        list_actions[j].update(x)
        
        # for plotting
        data[i] = x
        
    cumulative_average = np.cumsum(data) / (np.arange(N) + 1)
    
    # plot moving average ctr
    plt.plot(cumulative_average, label='cumulative_average')
    
    plt.plot(np.ones(N)*m1, label='m1')
    plt.plot(np.ones(N)*m2, label='m2')
    plt.plot(np.ones(N)*m3, label='m3')
    plt.legend()
    
    plt.xscale('log')
    plt.show()
    
    for a in list_actions:
        print(a.mean)
    return cumulative_average

if __name__ == '__main__':
    c_1 = run_experiment(1.0, 2.0, 3.0, 0.1, 100000)
    c_05 = run_experiment(1.0, 2.0, 3.0, 0.05, 100000)
    c_01 = run_experiment(1.0, 2.0, 3.0, 0.01, 100000)

# log scale plot
plt.plot(c_1, label ='eps = 0.1')
plt.plot(c_05, label ='eps = 0.05')
plt.plot(c_01, label ='eps = 0.01')
plt.legend()
plt.xscale('log')
plt.show()

# linear plot
plt.figure(figsize = (12, 8))
plt.plot(c_1, label ='eps = 0.1')
plt.plot(c_05, label ='eps = 0.05')
plt.plot(c_01, label ='eps = 0.01')
plt.legend()
plt.show()

###################################################
###################################################